plugins {
    id 'java'
    id 'war'
}

//apply from: 'script.gradle'
//apply plugin: CustomPlugins
//apply plugin: 'java'

repositories {
    mavenCentral()
}

configurations {
    Configuration configuration = getByName("implementation")
    dmdev {
        description = "dmdev configuration"
    }

    all {
        resolutionStrategy {
            force("org.springframework:spring-aop:5.3.8")
        }
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_16
    targetCompatibility = JavaVersion.VERSION_16
}

dependencies {
    // compileOnly ( "org.springframework.boot:spring-boot-dependencies:3.4.0")

    implementation group: 'org.springframework', name: 'spring-core', version: '5.3.9'
    implementation 'org.springframework:spring-webmvc:5.3.9'
    compileOnly 'jakarta.servlet:jakarta.servlet-api:6.1.0'
    //transitive(false)
    //    exclude(group: 'org.springframework', module: 'spring-aop')
//    }
    implementation 'org.springframework:spring-aop:5.3.9'
//        version {
//            strictly("5.3.8")
//        }
//    }

}


sourceSets {
    main {
        java {
            //    srcDir("$buildDir/generated-sources/querydsl")
        }
    }
    test {
    }
}

//configurations.runtimeClasspath.files.each {
//    println it
//}

jar {
    def jars = configurations.runtimeClasspath.files.collect {"lib/$it.name"}

    manifest {
        attributes 'Main-Class': 'com.dmdev.Hello',
        'Class-Path': jars.join(' ')

    }

//    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
//    from(configurations.runtimeClasspath.files.collect { zipTree(it) })
}

task copyAllDependencies(type: Copy) {
    from(configurations.runtimeClasspath.files)
    into("$buildDir/libs/lib")
}

jar.dependsOn copyAllDependencies
/*
class CustomPlugins implements Plugin<Project> {
    @Override
    void apply(Project project) {
        def map = [description: "Hello task", group: "dmdev", type: DefaultTask]
        project.task(map, "hello") {
            println "configuration phase. hello"
            println "taks $description, group : $group, actions : ${actions.size()},"

            doLast {
                println "execution phase, Action 2"
            }

            doLast {
                println "execution phase, Action 3"
            }

            doFirst {
                println "execution phase, Action 1"
            }

            println "path task : $path,"
        }
    }
}

 */
